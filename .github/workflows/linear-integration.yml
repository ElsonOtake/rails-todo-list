# .github/workflows/linear-integration.yml
name: Linear Integration Workflow

# This workflow is triggered by repository dispatch events from Linear via n8n
on:
  repository_dispatch:
    types: 
      - linear_event           # Main event type from n8n
      - linear_issue_created   # When new issue is created
      - linear_issue_updated   # When issue is updated
      - linear_issue_completed # When issue is marked complete

jobs:
  # Job 1: Process issues with "Ready for Claude" label
  process-claude-ready:
    if: contains(github.event.client_payload.labels, 'Ready for Claude')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create refactoring branch
        id: create-branch
        run: |
          echo "📝 Processing Linear issue for Claude"
          echo "Issue: ${{ github.event.client_payload.title }}"
          echo "ID: ${{ github.event.client_payload.issueId }}"
          
          # Extract team prefix and create branch name
          TEAM="${{ github.event.client_payload.team }}"
          ISSUE_ID="${{ github.event.client_payload.issueId }}"
          # Take first 8 chars of UUID for shorter branch name
          SHORT_ID="${ISSUE_ID:0:8}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Create branch name based on issue type
          if [[ "${{ toJson(github.event.client_payload.labels) }}" == *"Bug"* ]]; then
            BRANCH_NAME="fix/${TEAM,,}-${SHORT_ID}"
          else
            BRANCH_NAME="refactor/${TEAM,,}-${SHORT_ID}"
          fi
          
          echo "Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Create and checkout branch
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git checkout -b "$BRANCH_NAME"
          
      - name: Generate Claude instructions
        run: |
          cat > refactoring-instructions.md << 'EOF'
          # Linear Issue: ${{ github.event.client_payload.title }}
          
          ## Issue Details
          - **ID**: ${{ github.event.client_payload.issueId }}
          - **Team**: ${{ github.event.client_payload.team }}
          - **Priority**: ${{ github.event.client_payload.priority }}
          - **Estimate**: ${{ github.event.client_payload.estimate }} points
          - **Linear URL**: ${{ github.event.client_payload.url }}
          
          ## Labels
          ${{ toJson(github.event.client_payload.labels) }}
          
          ## Description
          ${{ github.event.client_payload.description }}
          
          ## Issue Type: ${{ github.event.client_payload.sections.type }}
          
          ### Current Behavior
          ${{ github.event.client_payload.sections.currentBehavior }}
          
          ### Expected Behavior
          ${{ github.event.client_payload.sections.expectedBehavior }}
          
          ### Steps to Reproduce
          ${{ github.event.client_payload.sections.stepsToReproduce }}
          
          ### Proposed Solution
          ${{ github.event.client_payload.sections.proposedSolution }}
          
          ---
          
          ## Refactoring Guidelines for Claude Code
          
          1. **Analyze the Issue**
             - Review the current behavior and identify the root cause
             - Consider the expected behavior and acceptance criteria
             - Evaluate the proposed solution
          
          2. **Implementation Approach**
             - Follow Rails best practices
             - Ensure backward compatibility
             - Write comprehensive tests
             - Update documentation as needed
          
          3. **Testing Requirements**
             - Add unit tests for bug fixes
             - Ensure all existing tests pass
             - Add integration tests if needed
          
          4. **Code Quality**
             - Run RuboCop for style consistency
             - Ensure no N+1 queries
             - Optimize performance where possible
          
          EOF
          
          echo "✅ Created refactoring instructions"
          
      - name: Create Claude task file
        run: |
          cat > .claude-task.json << EOF
          {
            "source": "linear",
            "issueId": "${{ github.event.client_payload.issueId }}",
            "title": "${{ github.event.client_payload.title }}",
            "team": "${{ github.event.client_payload.team }}",
            "priority": ${{ github.event.client_payload.priority }},
            "estimate": ${{ github.event.client_payload.estimate }},
            "labels": ${{ toJson(github.event.client_payload.labels) }},
            "type": "${{ github.event.client_payload.sections.type }}",
            "url": "${{ github.event.client_payload.url }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ steps.create-branch.outputs.branch_name }}",
            "instructions": {
              "currentBehavior": "${{ github.event.client_payload.sections.currentBehavior }}",
              "expectedBehavior": "${{ github.event.client_payload.sections.expectedBehavior }}",
              "stepsToReproduce": "${{ github.event.client_payload.sections.stepsToReproduce }}",
              "proposedSolution": "${{ github.event.client_payload.sections.proposedSolution }}"
            }
          }
          EOF
          
          echo "✅ Created Claude task file"
          
      - name: Commit and push branch
        run: |
          git add refactoring-instructions.md .claude-task.json
          git commit -m "Add Linear issue ${{ github.event.client_payload.issueId }} for Claude refactoring
          
          Issue: ${{ github.event.client_payload.title }}
          Team: ${{ github.event.client_payload.team }}
          Priority: P${{ github.event.client_payload.priority }}
          Labels: ${{ join(github.event.client_payload.labels, ', ') }}"
          
          git push origin ${{ steps.create-branch.outputs.branch_name }}
          
      - name: Create pull request
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          PR_BODY="## Linear Issue: ${{ github.event.client_payload.title }}
          
          ### Details
          - **Team**: ${{ github.event.client_payload.team }}
          - **Priority**: P${{ github.event.client_payload.priority }}
          - **Estimate**: ${{ github.event.client_payload.estimate }} points
          - **Linear URL**: ${{ github.event.client_payload.url }}
          
          ### Issue Type: ${{ github.event.client_payload.sections.type }}
          
          **Current Behavior**: ${{ github.event.client_payload.sections.currentBehavior }}
          
          **Expected Behavior**: ${{ github.event.client_payload.sections.expectedBehavior }}
          
          ### Next Steps
          1. Review the \`refactoring-instructions.md\` file
          2. Use Claude Code to implement the fix/refactor
          3. Ensure all tests pass
          4. Update this PR with your changes
          
          ---
          *This PR was automatically created from Linear issue ${{ github.event.client_payload.issueId }}*"
          
          gh pr create \
            --title "[${{ github.event.client_payload.team }}] ${{ github.event.client_payload.title }}" \
            --body "$PR_BODY" \
            --head ${{ steps.create-branch.outputs.branch_name }} \
            --base main \
            --label "linear-integration" \
            --label "needs-claude"

  # Job 2: Handle bug issues specifically
  handle-bugs:
    if: contains(github.event.client_payload.labels, 'Bug')
    runs-on: ubuntu-latest
    steps:
      - name: Process bug report
        run: |
          echo "🐛 Bug Report Received"
          echo "Title: ${{ github.event.client_payload.title }}"
          echo "Priority: P${{ github.event.client_payload.priority }}"
          echo "Team: ${{ github.event.client_payload.team }}"
          
          # Add bug-specific processing here
          # - Create bug tracking issue
          # - Notify team
          # - Run diagnostic tests
          
      - name: Check if critical bug
        if: github.event.client_payload.priority == 1
        run: |
          echo "⚠️ CRITICAL BUG DETECTED!"
          echo "Immediate action required for: ${{ github.event.client_payload.title }}"
          # Add critical bug handling:
          # - Send urgent notifications
          # - Create incident
          # - Page on-call engineer

  # Job 3: Sync status back to Linear
  update-linear:
    runs-on: ubuntu-latest
    if: always()
    needs: [process-claude-ready]
    steps:
      - name: Update Linear issue
        if: env.LINEAR_API_KEY != ''
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          echo "📝 Updating Linear issue status"
          
          # Update Linear issue with PR link
          # This requires Linear API key to be configured
          # curl -X POST \
          #   -H "Authorization: $LINEAR_API_KEY" \
          #   -H "Content-Type: application/json" \
          #   https://api.linear.app/graphql \
          #   -d '{
          #     "query": "mutation { commentCreate(input: { issueId: \"${{ github.event.client_payload.issueId }}\", body: \"🤖 GitHub Action processed this issue\\n\\nBranch created and PR opened for refactoring.\" }) { success } }"
          #   }'

  # Job 4: Debug - Show all received data
  debug-payload:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload != '' }}
    steps:
      - name: Display Linear payload
        run: |
          echo "🔍 Debug: Linear Issue Data"
          echo "=========================="
          echo ""
          echo "📋 Full Payload:"
          echo '${{ toJson(github.event.client_payload) }}' | jq '.'
          echo ""
          echo "📌 Key Fields:"
          echo "- Issue ID: ${{ github.event.client_payload.issueId }}"
          echo "- Title: ${{ github.event.client_payload.title }}"
          echo "- Team: ${{ github.event.client_payload.team }}"
          echo "- Priority: P${{ github.event.client_payload.priority }}"
          echo "- Estimate: ${{ github.event.client_payload.estimate }}"
          echo "- Type: ${{ github.event.client_payload.sections.type }}"
          echo "- URL: ${{ github.event.client_payload.url }}"
          echo ""
          echo "🏷️ Labels:"
          echo '${{ toJson(github.event.client_payload.labels) }}' | jq -r '.[]'
          echo ""
          echo "📝 Description:"
          echo "${{ github.event.client_payload.description }}"