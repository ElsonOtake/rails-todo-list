# .github/workflows/linear-integration.yml
name: Linear Integration Workflow

# This workflow is triggered by repository dispatch events from Linear via n8n
on:
  repository_dispatch:
    types: 
      - linear_to_github_issue_event  # Create GitHub issue from Linear
      - linear_to_github_pr_event     # Create GitHub PR from Linear
      - linear_issue_created   # When new issue is created
      - linear_issue_updated   # When issue is updated
      - linear_issue_completed # When issue is marked complete

jobs:
  # Job 1: Process issues with "Ready for Claude" label
  process-claude-ready:
    if: contains(github.event.client_payload.labels, 'Ready for Claude')
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
      issue_url: ${{ steps.create-issue.outputs.issue_url }}
      issue_number: ${{ steps.create-issue.outputs.issue_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
        
      - name: Create refactoring branch
        id: create-branch
        run: |
          echo "📝 Processing Linear issue for Claude"
          echo "Issue: ${{ github.event.client_payload.title }}"
          echo "ID: ${{ github.event.client_payload.issueId }}"
          
          # Extract team prefix and create branch name
          TEAM="${{ github.event.client_payload.team }}"
          ISSUE_ID="${{ github.event.client_payload.issueId }}"
          # Take first 8 chars of UUID for shorter branch name
          SHORT_ID="${ISSUE_ID:0:8}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Create branch name based on issue type
          LABELS='${{ toJson(github.event.client_payload.labels) }}'
          ISSUE_TYPE="${{ github.event.client_payload.sections.type }}"
          
          if [[ "$LABELS" == *"Bug"* ]] || [[ "$LABELS" == *"bug"* ]] || [[ "$ISSUE_TYPE" == "bug" ]]; then
            BRANCH_NAME="fix/${TEAM,,}-${SHORT_ID}"
          elif [[ "$LABELS" == *"feature"* ]] || [[ "$LABELS" == *"Feature"* ]] || [[ "$ISSUE_TYPE" == "feature" ]]; then
            BRANCH_NAME="feature/${TEAM,,}-${SHORT_ID}"
          else
            BRANCH_NAME="refactor/${TEAM,,}-${SHORT_ID}"
          fi
          
          echo "Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Fetch all branches to ensure we have latest state
          git fetch origin
          
          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "Branch $BRANCH_NAME exists remotely, fetching and resetting"
            git fetch origin "$BRANCH_NAME":"$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git reset --hard origin/main
            git branch --set-upstream-to=origin/"$BRANCH_NAME" "$BRANCH_NAME"
          else
            echo "Creating new branch $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
          fi
          
      - name: Generate Claude instructions
        run: |
          # Determine issue type and generate appropriate instructions
          ISSUE_TYPE="${{ github.event.client_payload.sections.type }}"
          LABELS='${{ toJson(github.event.client_payload.labels) }}'
          
          if [[ "$ISSUE_TYPE" == "bug" ]] || [[ "$LABELS" == *"Bug"* ]] || [[ "$LABELS" == *"bug"* ]]; then
            cat > refactoring-instructions.md << 'EOF'
          # 🐛 Bug Fix: ${{ github.event.client_payload.title }}
          
          ## Issue Details
          - **ID**: ${{ github.event.client_payload.issueId }}
          - **Team**: ${{ github.event.client_payload.team }}
          - **Priority**: ${{ github.event.client_payload.priority }}
          - **Estimate**: ${{ github.event.client_payload.estimate }} points
          - **Linear URL**: ${{ github.event.client_payload.url }}
          
          ## Labels
          ${{ toJson(github.event.client_payload.labels) }}
          
          ## Bug Report
          
          ### Current Behavior
          ${{ github.event.client_payload.sections.currentBehavior }}
          
          ### Expected Behavior
          ${{ github.event.client_payload.sections.expectedBehavior }}
          
          ### Steps to Reproduce
          ${{ github.event.client_payload.sections.stepsToReproduce }}
          
          ### Technical Details
          - **Component**: ${{ github.event.client_payload.sections.component }}
          - **Browser/Environment**: ${{ github.event.client_payload.sections.environment }}
          - **Priority**: ${{ github.event.client_payload.sections.priority }}
          
          ### Proposed Solution
          ${{ github.event.client_payload.sections.proposedSolution }}
          
          ---
          
          ## Bug Fix Guidelines for Claude Code
          
          1. **Reproduce the Bug**
             - Follow the steps to reproduce
             - Verify the current behavior
             - Document any additional observations
          
          2. **Root Cause Analysis**
             - Identify the source of the bug
             - Check for related issues
             - Review recent changes that might have introduced it
          
          3. **Implementation**
             - Fix the root cause, not just symptoms
             - Ensure backward compatibility
             - Add defensive coding where appropriate
          
          4. **Testing**
             - Write tests that reproduce the bug
             - Ensure the fix resolves the issue
             - Add regression tests
             - Run full test suite
          
          5. **Verification**
             - Test the fix in development
             - Verify no new issues introduced
             - Check performance impact
          EOF
          
          elif [[ "$ISSUE_TYPE" == "feature" ]] || [[ "$LABELS" == *"feature"* ]] || [[ "$LABELS" == *"Feature"* ]]; then
            cat > refactoring-instructions.md << 'EOF'
          # ✨ Feature Implementation: ${{ github.event.client_payload.title }}
          
          ## Issue Details
          - **ID**: ${{ github.event.client_payload.issueId }}
          - **Team**: ${{ github.event.client_payload.team }}
          - **Priority**: ${{ github.event.client_payload.priority }}
          - **Estimate**: ${{ github.event.client_payload.estimate }} points
          - **Linear URL**: ${{ github.event.client_payload.url }}
          
          ## Labels
          ${{ toJson(github.event.client_payload.labels) }}
          
          ## Feature Request
          
          ### Description
          ${{ github.event.client_payload.sections.description }}
          
          ### Requirements
          ${{ github.event.client_payload.sections.requirements }}
          
          ### Technical Details
          ${{ github.event.client_payload.sections.technicalDetails }}
          
          ### Acceptance Criteria
          ${{ github.event.client_payload.sections.acceptanceCriteria }}
          
          ---
          
          ## Feature Implementation Guidelines for Claude Code
          
          1. **Planning Phase**
             - Review all requirements thoroughly
             - Break down into smaller tasks
             - Identify dependencies
             - Plan the implementation approach
          
          2. **Architecture Design**
             - Design database schema if needed
             - Plan API endpoints
             - Consider security implications
             - Design for scalability
          
          3. **Implementation**
             - Follow Rails conventions
             - Implement incrementally
             - Write clean, maintainable code
             - Add proper error handling
          
          4. **Testing Strategy**
             - Write unit tests for all new code
             - Add integration tests for workflows
             - Test edge cases
             - Ensure acceptance criteria are met
          
          5. **Documentation**
             - Update API documentation
             - Add code comments for complex logic
             - Update README if needed
             - Document any new configurations
          EOF
          
          else
            # Default template for other types
            cat > refactoring-instructions.md << 'EOF'
          # Linear Issue: ${{ github.event.client_payload.title }}
          
          ## Issue Details
          - **ID**: ${{ github.event.client_payload.issueId }}
          - **Team**: ${{ github.event.client_payload.team }}
          - **Priority**: ${{ github.event.client_payload.priority }}
          - **Estimate**: ${{ github.event.client_payload.estimate }} points
          - **Linear URL**: ${{ github.event.client_payload.url }}
          
          ## Labels
          ${{ toJson(github.event.client_payload.labels) }}
          
          ## Description
          ${{ github.event.client_payload.description }}
          
          ## Additional Information
          ${{ toJson(github.event.client_payload.sections) }}
          
          ---
          
          ## Implementation Guidelines for Claude Code
          
          1. **Analysis**
             - Review the requirements
             - Understand the context
             - Identify key objectives
          
          2. **Implementation**
             - Follow best practices
             - Write clean code
             - Ensure maintainability
          
          3. **Testing**
             - Add appropriate tests
             - Verify functionality
             - Check edge cases
          
          4. **Documentation**
             - Update relevant documentation
             - Add code comments
          EOF
          fi
          
          echo "✅ Created refactoring instructions"
          
      - name: Create Claude task file
        run: |
          cat > .claude-task.json << EOF
          {
            "source": "linear",
            "issueId": "${{ github.event.client_payload.issueId }}",
            "title": "${{ github.event.client_payload.title }}",
            "team": "${{ github.event.client_payload.team }}",
            "priority": ${{ github.event.client_payload.priority }},
            "estimate": ${{ github.event.client_payload.estimate }},
            "labels": ${{ toJson(github.event.client_payload.labels) }},
            "type": "${{ github.event.client_payload.sections.type }}",
            "url": "${{ github.event.client_payload.url }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ steps.create-branch.outputs.branch_name }}",
            "instructions": {
              "currentBehavior": "${{ github.event.client_payload.sections.currentBehavior }}",
              "expectedBehavior": "${{ github.event.client_payload.sections.expectedBehavior }}",
              "stepsToReproduce": "${{ github.event.client_payload.sections.stepsToReproduce }}",
              "proposedSolution": "${{ github.event.client_payload.sections.proposedSolution }}",
              "description": "${{ github.event.client_payload.sections.description }}",
              "requirements": "${{ github.event.client_payload.sections.requirements }}",
              "technicalDetails": "${{ github.event.client_payload.sections.technicalDetails }}",
              "acceptanceCriteria": "${{ github.event.client_payload.sections.acceptanceCriteria }}"
            }
          }
          EOF
          
          echo "✅ Created Claude task file"
          
      - name: Commit and push branch
        run: |
          git add refactoring-instructions.md .claude-task.json
          git commit -m "Add Linear issue ${{ github.event.client_payload.issueId }} for Claude refactoring
          
          Issue: ${{ github.event.client_payload.title }}
          Team: ${{ github.event.client_payload.team }}
          Priority: P${{ github.event.client_payload.priority }}
          Labels: ${{ join(github.event.client_payload.labels, ', ') }}"
          
          git push --force origin ${{ steps.create-branch.outputs.branch_name }}
          
      - name: Create GitHub issue
        id: create-issue
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          ISSUE_BODY="## Linear Issue: ${{ github.event.client_payload.title }}
          
          ### Details
          - **Team**: ${{ github.event.client_payload.team }}
          - **Priority**: P${{ github.event.client_payload.priority }}
          - **Estimate**: ${{ github.event.client_payload.estimate }} points
          - **Linear URL**: ${{ github.event.client_payload.url }}
          - **Branch**: \`${{ steps.create-branch.outputs.branch_name }}\`
          
          ### Issue Type: ${{ github.event.client_payload.sections.type }}
          
          **Current Behavior**: ${{ github.event.client_payload.sections.currentBehavior }}
          
          **Expected Behavior**: ${{ github.event.client_payload.sections.expectedBehavior }}
          
          ### Implementation Instructions
          1. Check out the branch: \`git checkout ${{ steps.create-branch.outputs.branch_name }}\`
          2. Review the \`refactoring-instructions.md\` file
          3. Use Claude Code to implement the fix/refactor
          4. Ensure all tests pass
          5. Create a PR with your changes
          
          ---
          *This issue was automatically created from Linear issue ${{ github.event.client_payload.issueId }}*"
          
          ISSUE_URL=$(gh issue create \
            --title "[${{ github.event.client_payload.team }}] ${{ github.event.client_payload.title }}" \
            --body "$ISSUE_BODY" \
            --label "linear-integration" \
            --label "needs-claude")
          
          echo "Issue created: $ISSUE_URL"
          echo "issue_url=$ISSUE_URL" >> $GITHUB_OUTPUT
          
          # Extract issue number from URL
          ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -oE '[0-9]+$')
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
      

  # Job 2: Handle bug issues specifically
  handle-bugs:
    if: contains(github.event.client_payload.labels, 'Bug')
    runs-on: ubuntu-latest
    steps:
      - name: Process bug report
        run: |
          echo "🐛 Bug Report Received"
          echo "Title: ${{ github.event.client_payload.title }}"
          echo "Priority: P${{ github.event.client_payload.priority }}"
          echo "Team: ${{ github.event.client_payload.team }}"
          
          # Add bug-specific processing here
          # - Create bug tracking issue
          # - Notify team
          # - Run diagnostic tests
          
      - name: Check if critical bug
        if: github.event.client_payload.priority == 1
        run: |
          echo "⚠️ CRITICAL BUG DETECTED!"
          echo "Immediate action required for: ${{ github.event.client_payload.title }}"
          # Add critical bug handling:
          # - Send urgent notifications
          # - Create incident
          # - Page on-call engineer

  # Job 3: Sync status back to Linear
  update-linear:
    runs-on: ubuntu-latest
    if: always()
    needs: [process-claude-ready]
    steps:
      - name: Update Linear issue
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          ISSUE_ID: ${{ github.event.client_payload.issueId }}
          BRANCH_NAME: ${{ needs.process-claude-ready.outputs.branch_name }}
          ISSUE_URL: ${{ needs.process-claude-ready.outputs.issue_url }}
          ISSUE_NUMBER: ${{ needs.process-claude-ready.outputs.issue_number }}
        run: |
          echo "📝 Updating Linear issue status"
          
          # Check if LINEAR_API_KEY is set
          if [ -z "$LINEAR_API_KEY" ]; then
            echo "⚠️ LINEAR_API_KEY is not set. Skipping Linear update."
            exit 0
          fi
          
          # First, get the issue's internal ID and current labels
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.linear.app/graphql \
            -d "{
              \"query\": \"query { issue(id: \\\"$ISSUE_ID\\\") { id labels { nodes { id name } } } }\"
            }")
          
          # Extract the issue's internal ID
          INTERNAL_ID=$(echo "$RESPONSE" | jq -r '.data.issue.id')
          
          if [ "$INTERNAL_ID" != "null" ] && [ -n "$INTERNAL_ID" ]; then
            echo "Found issue with internal ID: $INTERNAL_ID"
            
            # Get all label IDs except "Ready for Claude"
            LABEL_IDS=$(echo "$RESPONSE" | jq -r '.data.issue.labels.nodes[] | select(.name != "Ready for Claude" and .name != "ready for Claude") | .id' | jq -R -s -c 'split("\n")[:-1]')
            
            echo "Keeping labels: $LABEL_IDS"
            
            # Update the issue to remove "Ready for Claude" label and add "In Progress"
            UPDATE_RESPONSE=$(curl -s -X POST \
              -H "Authorization: $LINEAR_API_KEY" \
              -H "Content-Type: application/json" \
              https://api.linear.app/graphql \
              -d "{
                \"query\": \"mutation { issueUpdate(id: \\\"$INTERNAL_ID\\\", input: { labelIds: $LABEL_IDS }) { success issue { labels { nodes { name } } } } }\"
              }")
            
            echo "Label update response: $UPDATE_RESPONSE"
            
            # Add a comment with the PR information
            COMMENT_RESPONSE=$(curl -s -X POST \
              -H "Authorization: $LINEAR_API_KEY" \
              -H "Content-Type: application/json" \
              https://api.linear.app/graphql \
              -d "{
                \"query\": \"mutation { commentCreate(input: { issueId: \\\"$INTERNAL_ID\\\", body: \\\"🤖 GitHub Action processed this issue\\n\\nGitHub Issue: $ISSUE_URL\\nBranch: \`$BRANCH_NAME\`\\n\\nThe GitHub issue has been created and Claude will be mentioned to implement the changes. The 'Ready for Claude' label has been removed.\\n\\nNext steps:\\n1. Check out the branch locally\\n2. Review the GitHub issue where @claude will be mentioned\\n3. Claude Code will implement the changes\\n4. Create a PR with the changes\\\" }) { success } }\"
              }")
            
            echo "Comment creation response: $COMMENT_RESPONSE"
          else
            echo "⚠️ Could not find Linear issue with ID: $ISSUE_ID"
            echo "API Response: $RESPONSE"
          fi

  # Job 4: Add Claude comment to the created GitHub issue
  comment-on-issue:
    runs-on: ubuntu-latest
    if: needs.process-claude-ready.outputs.issue_number != ''
    needs: [process-claude-ready, update-linear]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add Claude comment to issue
        env:
          GITHUB_TOKEN: ${{ github.token }}
          ISSUE_NUMBER: ${{ needs.process-claude-ready.outputs.issue_number }}
        run: |
          echo "📝 Adding Claude comment to GitHub issue #$ISSUE_NUMBER"
          
          # Determine the appropriate message based on issue type
          ISSUE_TYPE="${{ github.event.client_payload.sections.type }}"
          LABELS='${{ toJson(github.event.client_payload.labels) }}'
          
          if [[ "$ISSUE_TYPE" == "bug" ]] || [[ "$LABELS" == *"Bug"* ]] || [[ "$LABELS" == *"bug"* ]]; then
            COMMENT_BODY="@claude Fix this bug based on the issue description and the instructions in \`refactoring-instructions.md\`"
          elif [[ "$ISSUE_TYPE" == "feature" ]] || [[ "$LABELS" == *"feature"* ]] || [[ "$LABELS" == *"Feature"* ]]; then
            COMMENT_BODY="@claude Implement this feature based on the issue description and the requirements in \`refactoring-instructions.md\`"
          else
            COMMENT_BODY="@claude Implement this based on the issue description and the guidelines in \`refactoring-instructions.md\`"
          fi
          
          gh issue comment $ISSUE_NUMBER --body "$COMMENT_BODY"
          echo "✅ Added Claude comment to issue #$ISSUE_NUMBER"

  # Job 5: Debug - Show all received data
  debug-payload:
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload != '' }}
    steps:
      - name: Display Linear payload
        run: |
          echo "🔍 Debug: Linear Issue Data"
          echo "=========================="
          echo ""
          echo "📋 Full Payload:"
          echo '${{ toJson(github.event.client_payload) }}' | jq '.'
          echo ""
          echo "📌 Key Fields:"
          echo "- Issue ID: ${{ github.event.client_payload.issueId }}"
          echo "- Title: ${{ github.event.client_payload.title }}"
          echo "- Team: ${{ github.event.client_payload.team }}"
          echo "- Priority: P${{ github.event.client_payload.priority }}"
          echo "- Estimate: ${{ github.event.client_payload.estimate }}"
          echo "- Type: ${{ github.event.client_payload.sections.type }}"
          echo "- URL: ${{ github.event.client_payload.url }}"
          echo ""
          echo "🏷️ Labels:"
          echo '${{ toJson(github.event.client_payload.labels) }}' | jq -r '.[]'
          echo ""

  # Job 7: Process Linear PR creation events
  process-linear-pr:
    if: |
      github.event.action == 'linear_to_github_pr_event' && 
      contains(github.event.client_payload.labels, 'Ready for Claude')
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
      pr_url: ${{ steps.create-pr.outputs.pr_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create and setup branch
        id: create-branch
        run: |
          # Extract issue ID and team from Linear data
          ISSUE_ID="${{ github.event.client_payload.issueId }}"
          TEAM="${{ github.event.client_payload.team }}"
          SHORT_ID=$(echo "$ISSUE_ID" | cut -d'-' -f1-2)
          
          # Determine branch name based on issue type
          ISSUE_TYPE="${{ github.event.client_payload.sections.type }}"
          LABELS='${{ toJson(github.event.client_payload.labels) }}'
          
          if [[ "$ISSUE_TYPE" == "bug" ]] || [[ "$LABELS" == *"Bug"* ]] || [[ "$LABELS" == *"bug"* ]]; then
            BRANCH_NAME="fix/${TEAM,,}-${SHORT_ID}"
          elif [[ "$ISSUE_TYPE" == "feature" ]] || [[ "$LABELS" == *"feature"* ]] || [[ "$LABELS" == *"Feature"* ]]; then
            BRANCH_NAME="feature/${TEAM,,}-${SHORT_ID}"
          else
            BRANCH_NAME="refactor/${TEAM,,}-${SHORT_ID}"
          fi
          
          echo "Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Fetch all branches to ensure we have latest state
          git fetch origin
          
          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "Branch $BRANCH_NAME exists remotely, fetching and resetting"
            git fetch origin "$BRANCH_NAME":"$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git reset --hard origin/main
            git branch --set-upstream-to=origin/"$BRANCH_NAME" "$BRANCH_NAME"
          else
            echo "Creating new branch $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
          fi
          
      - name: Create placeholder file for PR
        run: |
          # Create a placeholder file to have something to commit
          ISSUE_ID="${{ github.event.client_payload.issueId }}"
          SHORT_ID=$(echo "$ISSUE_ID" | cut -d'-' -f1-2)
          
          cat > .linear-pr-${SHORT_ID}.md << 'EOF'
          # Linear Issue: ${{ github.event.client_payload.title }}
          
          **Issue ID**: ${{ github.event.client_payload.issueId }}
          **Team**: ${{ github.event.client_payload.team }}
          **Priority**: P${{ github.event.client_payload.priority }}
          **Linear URL**: ${{ github.event.client_payload.url }}
          
          ## Description
          ${{ github.event.client_payload.description }}
          
          ---
          *This file was auto-generated from Linear and will be removed when the implementation is complete.*
          EOF
          
          git add .linear-pr-*.md
          git commit -m "Add Linear issue ${{ github.event.client_payload.issueId }} for implementation"
          
      - name: Push branch
        run: |
          git push --force origin ${{ steps.create-branch.outputs.branch_name }}

      - name: Create Pull Request
        id: create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare PR body with template
          PR_BODY=$(cat <<'EOF'
          ## O que esse PR faz?
          
          ${{ github.event.client_payload.description }}
          
          ---
          
          **Linear Issue**: [${{ github.event.client_payload.title }}](${{ github.event.client_payload.url }})
          **Issue ID**: ${{ github.event.client_payload.issueId }}
          **Team**: ${{ github.event.client_payload.team }}
          **Priority**: P${{ github.event.client_payload.priority }}
          
          ## Tipo de mudança
          
          [//]: # 'Apague o que não for relevante.'
          
          - [ ] Bug (correção)
          - [ ] Nova funcionalidade (cria uma nova funcionalidade para o cliente)
          - [ ] Mudança de funcionalidade (muda a forma como uma funcionalidade atual funciona)
          
          ## Checklist:
          
          - [ ] Atualizei a planilha de permissões de usuários ([RBAC](https://docs.google.com/spreadsheets/d/1GkAj7nF1M7T3ggCvbGlsjvsUYGgT8OkFZU0L_dF1ka8/edit?gid=0#gid=0))
          - [ ] Atualizei a planilha de suporte a provedores financeiros oferecido pela Kobana ([SPRF](https://docs.google.com/spreadsheets/d/1NkceBPXPufOhz4lRZiGF03bV_fEtTQ6uaIwUhIYdKZg/edit?pli=1&gid=0#gid=0))
          - [ ] Adicionei novo campo/model no manage/admin
          - [ ] Adicionei novo campo/model no spec/swaggers para documentar na API
          - [ ] Notifiquei o suporte sobre mudança no menu de acesso dos clientes (Ordem, Nome, Local)
          - [ ] Precisa de atualizações nas documentações e tutoriais
          - [ ] Precisa rodar uma tarefa(app/tasks) após o deploy
          
          ## Screenshots:
          EOF
          )
          
          # Create the PR
          PR_TITLE="${{ github.event.client_payload.title }}"
          
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base main \
            --head "${{ steps.create-branch.outputs.branch_name }}" \
            --label "linear-integration" \
            --label "ready-for-claude"
          
          # Get PR number and URL
          PR_INFO=$(gh pr list --head "${{ steps.create-branch.outputs.branch_name }}" --json number,url --jq '.[0]')
          PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
          PR_URL=$(echo "$PR_INFO" | jq -r '.url')
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "✅ Created PR #$PR_NUMBER: $PR_URL"

  # Job 8: Add Claude comment to PR
  comment-on-pr:
    if: needs.process-linear-pr.outputs.pr_number != ''
    needs: [process-linear-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Add Claude comment to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.process-linear-pr.outputs.pr_number }}
        run: |
          echo "📝 Adding Claude comment to PR #$PR_NUMBER"
          
          COMMENT_BODY="@claude implement this feature based on the PR description"
          
          gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
          echo "✅ Added Claude comment to PR #$PR_NUMBER"

  # Job 9: Remove "Ready for Claude" label from Linear
  update-linear-pr:
    if: needs.process-linear-pr.outputs.pr_url != ''
    needs: process-linear-pr
    runs-on: ubuntu-latest
    steps:
      - name: Update Linear issue
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        run: |
          ISSUE_ID="${{ github.event.client_payload.issueId }}"
          PR_URL="${{ needs.process-linear-pr.outputs.pr_url }}"
          
          echo "🔄 Updating Linear issue $ISSUE_ID"
          
          # GraphQL mutation to remove label and add comment
          MUTATION='mutation UpdateIssue($issueId: String!, $labelIds: [String!]) {
            issueRemoveLabel(id: $issueId, labelId: "ready-for-claude") {
              success
            }
            commentCreate(input: {
              issueId: $issueId,
              body: "🤖 GitHub PR created: '"$PR_URL"'"
            }) {
              success
            }
          }'
          
          # Get current labels and remove "Ready for Claude"
          CURRENT_LABELS='${{ toJson(github.event.client_payload.labelIds) }}'
          UPDATED_LABELS=$(echo "$CURRENT_LABELS" | jq '. - ["ready-for-claude"]')
          
          # Execute the GraphQL mutation
          curl -X POST https://api.linear.app/graphql \
            -H "Authorization: $LINEAR_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "'"$MUTATION"'",
              "variables": {
                "issueId": "'"$ISSUE_ID"'",
                "labelIds": '"$UPDATED_LABELS"'
              }
            }'
          
          echo "✅ Updated Linear issue and removed 'Ready for Claude' label"
          echo "📝 Description:"
          echo "${{ github.event.client_payload.description }}"